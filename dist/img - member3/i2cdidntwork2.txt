#define I2C_MASTER_SCL_IO 2         // GPIO pin for I2C SCL
#define I2C_MASTER_SDA_IO 1         // GPIO pin for I2C SDA
#define I2C_MASTER_NUM I2C_NUM_0     // I2C port number
#define I2C_MASTER_FREQ_HZ 50000    // I2C master clock frequency

void i2c_init() {
    i2c_config_t conf = {
        .mode = I2C_MODE_MASTER,
        .sda_io_num = I2C_MASTER_SDA_IO,
        .scl_io_num = I2C_MASTER_SCL_IO,
        .sda_pullup_en = GPIO_PULLUP_ENABLE,
        .scl_pullup_en = GPIO_PULLUP_ENABLE,
        .master.clk_speed = I2C_MASTER_FREQ_HZ,
    };
    i2c_param_config(I2C_MASTER_NUM, &conf);
    i2c_driver_install(I2C_MASTER_NUM, conf.mode, 0, 0, 0);
}

esp_err_t i2c_write_byte(uint8_t i2c_address, uint8_t data) {
    i2c_cmd_handle_t cmd = i2c_cmd_link_create();

    i2c_master_start(cmd);
    i2c_master_write_byte(cmd, (i2c_address << 1) | I2C_MASTER_WRITE, true);
    i2c_master_write_byte(cmd, data, true);
    i2c_master_stop(cmd);

    esp_err_t ret = i2c_master_cmd_begin(I2C_MASTER_NUM, cmd, 1000 / portTICK_PERIOD_MS);
    i2c_cmd_link_delete(cmd);

    return ret;
}

i2c_init();

uint8_t device_address = 112;  
uint8_t data_received;

esp_err_t ret = i2c_write_byte(device_address, 224);
if (ret == ESP_OK) {
    printf("Data sent successfully!\n");
} else {
    printf("Failed to send data. Error code: %d\n", ret);
}

vTaskDelay(500 / portTICK_PERIOD_MS);

ret = i2c_write_byte(device_address, 81);
if (ret == ESP_OK) {
    printf("Data sent successfully!\n");
} else {
    printf("Failed to send data. Error code: %d\n", ret);
}

vTaskDelay(500 / portTICK_PERIOD_MS);

ret = i2c_write_byte(device_address, 225);
if (ret == ESP_OK) {
    printf("Data sent successfully!\n");
} else {
    printf("Failed to send data. Error code: %d\n", ret);
}

vTaskDelay(500 / portTICK_PERIOD_MS);

ret = i2c_read_byte(device_address, &data_received);
if (ret == ESP_OK) {
    printf("Data read successfully! Received: 0x%02X\n", data_received);
} else {
    printf("Failed to read data. Error code: %d\n", ret);
}